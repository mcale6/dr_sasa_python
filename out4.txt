#include "atom_bindings.hpp"
#include "utils.hpp"

namespace py = pybind11;

void bind_atom_struct(py::module& m) {
    py::class_<atom_struct>(m, "AtomStruct")
        // Constructor with default values
        .def(py::init<uint32_t, int, std::string, std::string, std::string, 
                     std::string, std::string, std::string, std::string,
                     float, float, float, std::string, float, float, std::string>(),
            py::arg("id") = 0,                    // Default ID
            py::arg("resi") = 0,                  // Default residue number
            py::arg("icode") = "",                // Default insertion code
            py::arg("name") = "",                 // Default atom name
            py::arg("resn") = "",                 // Default residue name
            py::arg("chain") = "",                // Default chain ID
            py::arg("element") = "",              // Default element
            py::arg("structure") = "",            // Default structure
            py::arg("mol_type") = "ATOM",         // Default molecule type
            py::arg("x") = 0.0f,                  // Default x coordinate
            py::arg("y") = 0.0f,                  // Default y coordinate
            py::arg("z") = 0.0f,                  // Default z coordinate
            py::arg("altloc") = "",               // Default alternate location
            py::arg("occupancy") = 1.0f,          // Default occupancy
            py::arg("tfactor") = 0.0f,            // Default temperature factor
            py::arg("charge") = "")               // Default charge
        
        // Essential properties for basic functionality
        .def_readwrite("ID", &atom_struct::ID)                    // Atom ID
        .def_readwrite("NAME", &atom_struct::NAME)                // Atom name (e.g., "CA")
        .def_readwrite("RESN", &atom_struct::RESN)                // Residue name (e.g., "ALA")
        .def_readwrite("CHAIN", &atom_struct::CHAIN)              // Chain identifier
        .def_readwrite("RESI", &atom_struct::RESI)                // Residue number
        .def_readwrite("iCODE", &atom_struct::iCODE)             // Insertion code
        .def_readwrite("SASA", &atom_struct::SASA)               // Solvent accessible surface area
        .def_readwrite("MOL_TYPE", &atom_struct::MOL_TYPE)       // Molecule type
        .def_readwrite("STRUCT_TYPE", &atom_struct::STRUCT_TYPE)  // Structure type
        .def_readwrite("ELEMENT", &atom_struct::ELEMENT)          // Chemical element
        .def_readwrite("HETATM", &atom_struct::HETATM)           // HETATM flag
        .def_readwrite("ACTIVE", &atom_struct::ACTIVE)           // Active flag
        
        // Properties for coordinates and measurements
        .def_property("COORDS",
            [](const atom_struct& a) {
                return py::make_tuple(a.COORDS[0], a.COORDS[1], a.COORDS[2]);
            },
            [](atom_struct& a, py::sequence coords) {
                if (py::len(coords) != 3) {
                    throw std::runtime_error("Coordinates must have exactly 3 elements");
                }
                std::vector<float> new_coords = {
                    coords[0].cast<float>(),
                    coords[1].cast<float>(),
                    coords[2].cast<float>()
                };
                a.COORDS = new_coords;
            })
        .def_property("COORDS",
            [](const atom_struct& a) {
                return py::array_t<float>({3}, a.COORDS.data());
            },
            [](atom_struct& a, py::array_t<float> array) {
                if (array.size() != 3) {
                    throw std::runtime_error("Coordinates must be length 3");
                }
                a.COORDS = numpy_to_vector(array);
            })
                .def_property_readonly("contacts",
            [](const atom_struct& a) {
                return conversion::atom_contacts_to_dict(a);
            })
        .def_property_readonly("interaction_partners",
            [](const atom_struct& a) {
                return py::array_t<uint32_t>(
                    a.INTERACTION_SASA_P.size(),
                    a.INTERACTION_SASA_P.data()
                );
            })
        .def_readwrite("VDW", &atom_struct::VDW)                 // Van der Waals radius
        .def_readwrite("AREA", &atom_struct::AREA)               // Surface area
        
        // Additional properties
        .def_readwrite("ALTLOC", &atom_struct::ALTLOC)           // Alternate location
        .def_readwrite("OCCUPANCY", &atom_struct::OCCUPANCY)     // Occupancy
        .def_readwrite("TFACTOR", &atom_struct::TFACTOR)         // Temperature factor
        .def_readwrite("CHARGE", &atom_struct::CHARGE)           // Charge
        
        // Methods
        .def("sID", &atom_struct::sID)       // Get string ID
        .def("rsID", &atom_struct::rsID)     // Get residue string ID
        .def("print", [](const atom_struct& self) {
            atom_struct copy = self;
            return copy.print();
        })
        
        // String representation
        .def("__repr__", [](const atom_struct& self) {
            atom_struct copy = self;
            return "<AtomStruct: " + copy.print() + ">";
        });
}#pragma once
#include "common.hpp"

// Function declaration for atom struct bindings
void bind_atom_struct(pybind11::module& m);// src/constants.hpp
#pragma once
#include <map>
#include <string>
#include <vector>

// Basic types
using uint32 = std::uint32_t;

// Core constants
constexpr float DEFAULT_PROBE_RADIUS = 1.4f;

// Standard SASA reference values - these are actually used in create_analysis_results
static const std::map<std::string, float> STANDARD_SASA = {
    {"ALA", 92.40211452},
    {"GLN", 184.71688},
    {"TRP", 235.3483229},
    {"SER", 122.353095},
    {"ARG", 219.941475},
    {"ILE", 158.07277},
    {"ASN", 146.06073},
    {"ASP", 154.71124},
    {"HIS", 194.617376},
    {"MET", 191.547244},
    {"LYS", 201.689792},
    {"LEU", 169.04496452},
    {"THR", 145.526463},
    {"PHE", 201.7065},
    {"TYR", 209.07715},
    {"GLU", 160.482561},
    {"CYS", 130.28853},
    {"PRO", 126.877028},
    {"GLY", 80.23533},
    {"VAL", 138.90233},
    {"A", 163.5912717},
    {"C", 162.86302775},
    {"T", 173.03036075},
    {"G", 164.253836},
    {"DA", 163.5912717},
    {"DC", 162.86302775},
    {"DT", 173.03036075},
    {"DG", 164.253836}
};

// Classification constants - these are used in the analysis functions
static const std::vector<std::string> BACKBONE_ATOMS = {
    "C", "CA", "N", "O", "P", "OP1", "OP2", "O3'", "O5'", "C3'", "C4'", "C5'"
};

static const std::vector<std::string> POLAR_BACKBONE = {
    "N", "O", "OP1", "OP2", "O3'", "O5'"
};

static const std::vector<std::string> HYD_BACKBONE = {
    "C", "CA", "C3'", "C4'", "C5'"
};

static const std::vector<std::string> POLAR_SIDECHAIN = {
    "NZ", "OG", "OG1", "ND1", "NE2", "OE1", "OE2", "NE", "NH1", "NH2",
    "OD1", "OD2", "OH", "SE", "SG", "N1", "N2", "N3", "N4", "N6", "N7", "N9",
    "O2", "O4", "O6"
};

static const std::vector<std::string> HYD_SIDECHAIN = {
    "CB", "CG", "CG1", "CG2", "CD", "CD1", "CD2", "CE", "CE1", "CE2", "CE3",
    "CZ", "CZ2", "CZ3", "CH2", "C2", "C4", "C5", "C6", "C8"
};

// Groove classification - used in create_analysis_results
static const std::map<std::string, std::vector<std::string>> MAJOR_GROOVE = {
    {"A", {"N6", "N7", "C8", "C5"}},
    {"G", {"O6", "N7", "C8", "C5"}},
    {"C", {"N4", "C5", "C6"}},
    {"T", {"O4", "C5", "C6", "C7"}},
    {"DA", {"N6", "N7", "C8", "C5"}},
    {"DG", {"O6", "N7", "C8", "C5"}},
    {"DC", {"N4", "C5", "C6"}},
    {"DT", {"O4", "C5", "C6", "C7"}}
};

static const std::map<std::string, std::vector<std::string>> MINOR_GROOVE = {
    {"A", {"N1", "C2", "N3"}},
    {"G", {"N2", "N3", "C2"}},
    {"C", {"O2", "N3", "C2"}},
    {"T", {"O2", "N3", "C2"}},
    {"DA", {"N1", "C2", "N3"}},
    {"DG", {"N2", "N3", "C2"}},
    {"DC", {"O2", "N3", "C2"}},
    {"DT", {"O2", "N3", "C2"}}
};

// Classification helper functions
inline bool is_backbone(const std::string& atom_name) {
    return std::find(BACKBONE_ATOMS.begin(), BACKBONE_ATOMS.end(), atom_name) != BACKBONE_ATOMS.end();
}

inline bool is_polar_backbone(const std::string& atom_name) {
    return std::find(POLAR_BACKBONE.begin(), POLAR_BACKBONE.end(), atom_name) != POLAR_BACKBONE.end();
}

inline bool is_hyd_backbone(const std::string& atom_name) {
    return std::find(HYD_BACKBONE.begin(), HYD_BACKBONE.end(), atom_name) != HYD_BACKBONE.end();
}

inline bool is_polar_sidechain(const std::string& atom_name) {
    return std::find(POLAR_SIDECHAIN.begin(), POLAR_SIDECHAIN.end(), atom_name) != POLAR_SIDECHAIN.end();
}

inline bool is_hyd_sidechain(const std::string& atom_name) {
    return std::find(HYD_SIDECHAIN.begin(), HYD_SIDECHAIN.end(), atom_name) != HYD_SIDECHAIN.end();
}

inline bool is_in_major_groove(const std::string& resname, const std::string& atom_name) {
    auto it = MAJOR_GROOVE.find(resname);
    return it != MAJOR_GROOVE.end() && 
           std::find(it->second.begin(), it->second.end(), atom_name) != it->second.end();
}

inline bool is_in_minor_groove(const std::string& resname, const std::string& atom_name) {
    auto it = MINOR_GROOVE.find(resname);
    return it != MINOR_GROOVE.end() && 
           std::find(it->second.begin(), it->second.end(), atom_name) != it->second.end();
}#include "decoupled_sasa.hpp"
#include "utils.hpp"

#pragma once
#include <stdexcept>

class SASAError : public std::runtime_error {
    using std::runtime_error::runtime_error;
};
#pragma once
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include "atom_bindings.hpp"
#include "exceptions.hpp"
#include "constants.hpp"
#include "utils.hpp"

namespace py = pybind11;

// Base class for all SASA calculators
class SASACalculator {
protected:
    VDWcontainer vdw_radii_;
    float probe_radius_;
    int compute_mode_;

public:
    SASACalculator(float probe_radius = DEFAULT_PROBE_RADIUS, int compute_mode = 0)
        : vdw_radii_(""), probe_radius_(probe_radius), compute_mode_(compute_mode) {
        vdw_radii_.GenPoints();
    }
};

// Simple SASA Calculator
class SimpleSASA : public SASACalculator {
public:
    using SASACalculator::SASACalculator;

    py::dict calculate(const std::string& pdb_file,
                      bool print_output = false,
                      const std::string& output_name = "output");

    py::dict calculate_from_atoms(std::vector<atom_struct> atoms,
                                bool print_output = false,
                                const std::string& output_name = "output");
};

// Generic SASA Calculator
class GenericSASA : public SASACalculator {
public:
    using SASACalculator::SASACalculator;

    py::dict calculate(const std::string& pdb_file,
                      std::vector<std::vector<std::string>>& chains,
                      bool include_matrix = true,
                      bool print_output = false,
                      const std::string& output_name = "output");

    py::dict calculate_from_atoms(std::vector<atom_struct> atoms,
                                std::vector<std::vector<std::string>>& chains,
                                bool include_matrix = true,
                                bool print_output = false,
                                const std::string& output_name = "output");
};

// Decoupled SASA Calculator
class DecoupledSASA : public SASACalculator {
public:
    using SASACalculator::SASACalculator;

    py::dict calculate(const std::string& pdb_file,
                      std::vector<std::vector<std::string>>& chains,
                      bool include_matrix = true,
                      bool print_output = false,
                      const std::string& output_name = "output");

    py::dict calculate_from_atoms(std::vector<atom_struct> atoms,
                                std::vector<std::vector<std::string>>& chains,
                                bool include_matrix = true,
                                bool print_output = false,
                                const std::string& output_name = "output");
};
#include "simple_sasa.hpp"
#include "utils.hpp"

py::dict SimpleSASA::calculate(const std::string& pdb_file,
                             bool print_output,
                             const std::string& output_name) {
    std::stringstream buffer;
    auto old_buf = std::cerr.rdbuf(buffer.rdbuf());
    auto atoms = PDBparser(pdb_file, "", true);
    if (atoms.empty()) {
        throw std::runtime_error("No atoms loaded from PDB file");
    }
    std::cerr.rdbuf(old_buf);
    
    return calculate_from_atoms(std::move(atoms), print_output, output_name);
}

py::dict SimpleSASA::calculate_from_atoms(std::vector<atom_struct> atoms,
                                        bool print_output,
                                        const std::string& output_name) {
    if (atoms.empty()) {
        throw std::runtime_error("No atoms provided");
    }

    std::stringstream buffer;
    auto old_buf = std::cerr.rdbuf(buffer.rdbuf());
    vdw_radii_.SetRadius(atoms, probe_radius_);  // Just set radius, VDWcontainer already initialized
    std::cerr.rdbuf(old_buf);
    
    SolveInteractions(atoms, 0);
    SimpleSolverCL(atoms, vdw_radii_.Points, cl_mode_);
    
    if (print_output) {
        int atmasa_sasa = 0;
        std::stringstream base_output;
        base_output << output_name;
        // .asa.pdb file - main SASA results in PDB format
        std::string asa_file = base_output.str() + ".asa.pdb";
        PrintSASAResults(atoms, asa_file);
        // .atmasa file - per-type SASA analysis
        std::string atmasa_file = base_output.str() + ".atmasa";
        PrintSplitAsaAtom(atoms, atmasa_file, atmasa_sasa);
    }
    
    py::dict results = create_analysis_results(atoms, false);
    return results;
}#pragma once
#include "common.hpp"

class SimpleSASA {
public:
    // Constructor with member initialization list
    SimpleSASA(float probe_radius = DEFAULT_PROBE_RADIUS, int compute_mode = 0)
        : vdw_radii_(""),  // Initialize VDWcontainer directly
          probe_radius_(probe_radius),
          cl_mode_(compute_mode)
    {
        vdw_radii_.GenPoints();
    }
    
    py::dict calculate(const std::string& pdb_file,
                      bool print_output = false,
                      const std::string& output_name = "output");

    py::dict calculate_from_atoms(std::vector<atom_struct> atoms,
                                bool print_output = false,
                                const std::string& output_name = "output");

private:
    VDWcontainer vdw_radii_;  // Now initialized in constructor
    float probe_radius_;
    int cl_mode_;
};#include "utils.hpp"


ASAComponents classify_atom_asa(const atom_struct& atom, float base_asa) {
    ASAComponents components;
    
    if (atom.MOL_TYPE == "PROTEIN") {
        if (is_backbone(atom.NAME)) {
            components.bb_asa = base_asa;
            if (is_polar_backbone(atom.NAME)) {
                components.polar_asa = base_asa;
                components.polar_bb_asa = base_asa;
            } else if (is_hyd_backbone(atom.NAME)) {
                components.hyd_asa = base_asa;
                components.hyd_bb_asa = base_asa;
            }
        } else {
            components.sc_asa = base_asa;
            if (is_polar_sidechain(atom.NAME)) {
                components.polar_asa = base_asa;
                components.polar_sc_asa = base_asa;
            } else if (is_hyd_sidechain(atom.NAME)) {
                components.hyd_asa = base_asa;
                components.hyd_sc_asa = base_asa;
            }
        }
    } else if (atom.MOL_TYPE == "DNA" || atom.MOL_TYPE == "RNA") {
        if (is_backbone(atom.NAME)) {
            components.bb_asa = base_asa;
            if (is_polar_backbone(atom.NAME)) {
                components.polar_asa = base_asa;
                components.polar_bb_asa = base_asa;
            } else if (is_hyd_backbone(atom.NAME)) {
                components.hyd_asa = base_asa;
                components.hyd_bb_asa = base_asa;
            }
        } else if (is_in_major_groove(atom.RESN, atom.NAME)) {
            components.majorgroove_asa = base_asa;
            if (atom.POLAR) {
                components.polar_asa = base_asa;
                components.polar_majorgroove_asa = base_asa;
            } else {
                components.hyd_asa = base_asa;
                components.hyd_majorgroove_asa = base_asa;
            }
        } else if (is_in_minor_groove(atom.RESN, atom.NAME)) {
            components.minorgroove_asa = base_asa;
            if (atom.POLAR) {
                components.polar_asa = base_asa;
                components.polar_minorgroove_asa = base_asa;
            } else {
                components.hyd_asa = base_asa;
                components.hyd_minorgroove_asa = base_asa;
            }
        } else {
            components.nogroove_asa = base_asa;
            if (atom.POLAR) {
                components.polar_asa = base_asa;
                components.polar_nogroove_asa = base_asa;
            } else {
                components.hyd_asa = base_asa;
                components.hyd_nogroove_asa = base_asa;
            }
        }
    } else if (atom.MOL_TYPE == "LIGAND") {
        components.lig_asa = base_asa;
        if (atom.POLAR) {
            components.lig_polar_asa = base_asa;
        } else {
            components.lig_hyd_asa = base_asa;
        }
    }
    
    return components;
}


py::dict create_analysis_results(const std::vector<atom_struct>& atoms, bool include_matrix) {
    py::dict results;
    py::dict atom_data;
    py::list residue_data;
    py::dict residue_index;
    
    std::map<std::tuple<std::string, std::string, int>, py::dict> residue_temp_data;
    
    for (size_t i = 0; i < atoms.size(); ++i) {
        const auto& atom = atoms[i];
        if (!atom.ACTIVE) continue;

        float base_asa = atom.SASA;
        auto components = classify_atom_asa(atom, base_asa);
        
        // Create atom data with all fields
        py::dict atom_info = py::dict(
            "name"_a=atom.NAME,
            "resname"_a=atom.RESN,
            "chain"_a=atom.CHAIN,
            "resid"_a=atom.RESI,
            "struct_type"_a=atom.STRUCT_TYPE,
            "coords"_a=py::make_tuple(atom.COORDS[0], atom.COORDS[1], atom.COORDS[2]),
            "sphere_area"_a=atom.AREA,
            "sasa"_a=atom.SASA,
            "dsasa"_a=atom.EXT1,
            "vdw"_a=atom.VDW,
            "polar"_a=atom.POLAR,
            "charge"_a=atom.CHARGE,
            
            // All ASA components from our helper
            "total_asa"_a=base_asa,
            "bb_asa"_a=components.bb_asa,
            "sc_asa"_a=components.sc_asa,
            "majorgroove_asa"_a=components.majorgroove_asa,
            "minorgroove_asa"_a=components.minorgroove_asa,
            "nogroove_asa"_a=components.nogroove_asa,
            "polar_asa"_a=components.polar_asa,
            "polar_bb_asa"_a=components.polar_bb_asa,
            "polar_sc_asa"_a=components.polar_sc_asa,
            "polar_majorgroove_asa"_a=components.polar_majorgroove_asa,
            "polar_minorgroove_asa"_a=components.polar_minorgroove_asa,
            "polar_nogroove_asa"_a=components.polar_nogroove_asa,
            "hyd_asa"_a=components.hyd_asa,
            "hyd_bb_asa"_a=components.hyd_bb_asa,
            "hyd_sc_asa"_a=components.hyd_sc_asa,
            "hyd_majorgroove_asa"_a=components.hyd_majorgroove_asa,
            "hyd_minorgroove_asa"_a=components.hyd_minorgroove_asa,
            "hyd_nogroove_asa"_a=components.hyd_nogroove_asa,
            "lig_asa"_a=components.lig_asa,
            "lig_polar_asa"_a=components.lig_polar_asa,
            "lig_hyd_asa"_a=components.lig_hyd_asa
        );

        // Add to atom_data
        atom_data[py::str(std::to_string(atom.ID))] = std::move(atom_info);

        // Aggregate residue data with contacts and overlaps
        auto res_key = std::make_tuple(atom.CHAIN, atom.RESN, atom.RESI);
        if (residue_temp_data.find(res_key) == residue_temp_data.end()) {
            auto it = STANDARD_SASA_VALUES.find(atom.RESN);
            float standard_sasa = it != STANDARD_SASA_VALUES.end() ? it->second : 0.0f;
            
            residue_temp_data[res_key] = py::dict(
                "chain"_a=atom.CHAIN,
                "resname"_a=atom.RESN,
                "resid"_a=atom.RESI,
                "total_sasa"_a=atom.SASA,
                "total_area"_a=atom.AREA,
                "standard_sasa"_a=standard_sasa,
                "n_atoms"_a=1,
                "center"_a=py::make_tuple(atom.COORDS[0], atom.COORDS[1], atom.COORDS[2]),
                "contacts"_a=py::dict(),
                "overlaps"_a=py::list()
            );
        } else {
            auto& res = residue_temp_data[res_key];
            res["total_sasa"] = res["total_sasa"].cast<float>() + atom.SASA;
            res["total_area"] = res["total_area"].cast<float>() + atom.AREA;
            res["n_atoms"] = res["n_atoms"].cast<int>() + 1;
            
            // Update center
            auto center = res["center"].cast<py::tuple>();
            res["center"] = py::make_tuple(
                center[0].cast<float>() + atom.COORDS[0],
                center[1].cast<float>() + atom.COORDS[1],
                center[2].cast<float>() + atom.COORDS[2]
            );
        }

        // Add contacts to residue data
        auto& res = residue_temp_data[res_key];
        auto contacts = res["contacts"].cast<py::dict>();
        for (uint32_t pos : atom.INTERACTION_SASA_P) {
            const auto& other_atom = atoms[pos];
            contacts[py::str(std::to_string(other_atom.ID))] = py::dict(
                "struct_type"_a=other_atom.STRUCT_TYPE,
                "contact_area"_a=atom.CONTACT_AREA.at(other_atom.ID),
                "distance"_a=atom.DISTANCES.at(pos)
            );
        }
        res["contacts"] = contacts;

        // Add overlaps to residue data
        auto overlaps = res["overlaps"].cast<py::list>();
        for (size_t j = 0; j < atom.ov_table.size(); ++j) {
            const auto& overlap_set = atom.ov_table[j];
            std::vector<uint32_t> overlap_ids;
            for (uint32_t pos : overlap_set) {
                overlap_ids.push_back(atoms[pos].ID);
            }
            
            overlaps.append(py::dict(
                "atoms"_a=overlap_ids,
                "overlap_area"_a=atom.ov_table_area[j],
                "normalized_area"_a=atom.ov_norm_area[j],
                "buried_area"_a=atom.AREA_BURIED_BY_ATOM_area[j]
            ));
        }
        res["overlaps"] = overlaps;
    }

    // Finalize residue data and build index
    size_t index = 0;
    for (auto& [key, res] : residue_temp_data) {
        const auto& [chain, resname, resid] = key;
        int n_atoms = res["n_atoms"].cast<int>();
        float total_sasa = res["total_sasa"].cast<float>();
        float standard_sasa = res["standard_sasa"].cast<float>();
        
        // Calculate dSASA properly
        float dsasa = std::max(0.0f, standard_sasa - total_sasa);
        
        // Update center
        auto center = res["center"].cast<py::tuple>();
        res["center"] = py::make_tuple(
            center[0].cast<float>() / n_atoms,
            center[1].cast<float>() / n_atoms,
            center[2].cast<float>() / n_atoms
        );
        
        // Set final dSASA
        res["dsasa"] = dsasa;
        
        // Add to residue_data list
        residue_data.append(res);
        
        // Create unique residue identifier and add to index
        std::string residue_id = chain + "_" + resname + "_" + std::to_string(resid);
        residue_index[py::str(residue_id)] = index++;
    }

    // Create final structure with both list and index
    results["atom_data"] = atom_data;
    results["residue_data"] = residue_data;
    results["residue_index"] = residue_index;
    
    return results;
}

py::dict generate_inter_bsa_matrices(std::vector<atom_struct>& atoms) {
    map<vector<string>, vector<float>> matrixIJatom;
    map<vector<string>, vector<float>> matrixIJres;
    map<vector<string>, vector<string>> COLatom, COLres;
    map<vector<string>, vector<string>> ROWatom, ROWres;
    map<vector<string>, vector<uint32_t>> COLatomtype, ROWatomtype;

    GenerateInterBSAMatrix(atoms, matrixIJatom, matrixIJres, 
                          COLatom, COLres, ROWatom, ROWres,
                          COLatomtype, ROWatomtype);

    py::dict results;
    
    // Add atom-level matrices
    for (const auto& [key, matrix] : matrixIJatom) {
        const auto& cols = COLatom[key];
        const auto& rows = ROWatom[key];
        
        results[py::str(key[0] + "_vs_" + key[1])] = py::dict(
            "matrix"_a = py::array_t<float>({rows.size(), cols.size()}, matrix.data()),
            "row_labels"_a = rows,
            "col_labels"_a = cols,
            "row_types"_a = ROWatomtype[key],
            "col_types"_a = COLatomtype[key]
        );
    }
    
    // Add residue-level matrices
    py::dict res_matrices;
    for (const auto& [key, matrix] : matrixIJres) {
        const auto& cols = COLres[key];
        const auto& rows = ROWres[key];
        
        res_matrices[py::str(key[0] + "_vs_" + key[1])] = py::dict(
            "matrix"_a = py::array_t<float>({rows.size(), cols.size()}, matrix.data()),
            "row_labels"_a = rows,
            "col_labels"_a = cols
        );
    }
    results["residue_matrices"] = res_matrices;
    
    return results;
}

py::dict generate_intra_bsa_matrices(std::vector<atom_struct>& atoms) {
    vector<float> matrixIJatom, matrixIJres;
    vector<string> COLatom, COLres, ROWatom, ROWres;
    vector<uint32_t> COLatomtype, ROWatomtype;

    GenerateIntraBSAMatrix(atoms, matrixIJatom, matrixIJres,
                          COLatom, COLres, ROWatom, ROWres,
                          COLatomtype, ROWatomtype);

    return py::dict(
        "atom_matrix"_a = py::array_t<float>(
            {ROWatom.size(), COLatom.size()}, 
            matrixIJatom.data()
        ),
        "residue_matrix"_a = py::array_t<float>(
            {ROWres.size(), COLres.size()}, 
            matrixIJres.data()
        ),
        "atom_labels"_a = COLatom,
        "residue_labels"_a = COLres,
        "atom_types"_a = COLatomtype
    );
}

void CalculateContactAreasFromOverlaps(vector<atom_struct>& pdb) {
    // Process each atom
    for (size_t pos = 0; pos < pdb.size(); ++pos) {
        auto& atom_i = pdb[pos];
        if (!atom_i.ACTIVE) continue;

        vector<uint32> o_atoms;
        vector<uint32> interac_pos;
        vector<char> valid_overlaps(atom_i.AREA_BURIED_BY_ATOM_vector.size(), true);

        // Find interacting atoms with different STRUCT_TYPE
        for (uint32 i = 0; i < atom_i.INTERACTION_P.size(); ++i) {
            if (atom_i.STRUCT_TYPE != pdb[atom_i.INTERACTION_P[i]].STRUCT_TYPE) {
                interac_pos.push_back(atom_i.INTERACTION_P[i]);
            }
        }

        // Validate overlaps and collect unique interacting atoms
        for (uint32 i = 0; i < atom_i.AREA_BURIED_BY_ATOM_vector.size(); ++i) {
            for (uint32 k = 0; k < atom_i.AREA_BURIED_BY_ATOM_vector[i].size(); ++k) {
                uint32 other = atom_i.AREA_BURIED_BY_ATOM_vector[i][k];
                if (interac_pos.end() == find(interac_pos.begin(), interac_pos.end(), other)) {
                    valid_overlaps[i] = false;
                }
            }
            if (!valid_overlaps[i]) continue;

            atom_i.AREA_BURIED_BY_ATOM_vector_valid.push_back(i);
            for (uint32 j = 0; j < atom_i.AREA_BURIED_BY_ATOM_vector[i].size(); ++j) {
                if (o_atoms.end() == find(o_atoms.begin(), o_atoms.end(), atom_i.AREA_BURIED_BY_ATOM_vector[i][j])) {
                    o_atoms.push_back(atom_i.AREA_BURIED_BY_ATOM_vector[i][j]);
                }
            }
        }

        sort(o_atoms.begin(), o_atoms.end());

        // Calculate EXT0 (total buried area)
        atom_i.EXT0 = 0.0;
        for (uint32 i = 0; i < atom_i.AREA_BURIED_BY_ATOM_area.size(); ++i) {
            if (valid_overlaps[i]) {
                atom_i.EXT0 += atom_i.AREA_BURIED_BY_ATOM_area[i];
                atom_i.SASA = atom_i.AREA - atom_i.EXT0;  // Calculate SASA from buried area
                atom_i.EXT1 = atom_i.EXT0;  // In decoupled mode, dSASA equals buried area
            }
        }

        // Store interaction atoms and calculate contact areas
        atom_i.INTERACTION_SASA_P = o_atoms;
        
        // Calculate contact areas
        for (uint32 other_pos : o_atoms) {
            float T_area = 0;
            auto& atom_j = pdb[other_pos];
            
            for (uint32 j = 0; j < atom_i.AREA_BURIED_BY_ATOM_vector.size(); ++j) {
                if (valid_overlaps[j] && 
                    atom_i.AREA_BURIED_BY_ATOM_vector[j].end() != 
                    find(atom_i.AREA_BURIED_BY_ATOM_vector[j].begin(), 
                         atom_i.AREA_BURIED_BY_ATOM_vector[j].end(), 
                         other_pos)) {
                    T_area += atom_i.AREA_BURIED_BY_ATOM_area[j];
                }
            }
            
            atom_i.CONTACT_AREA[atom_j.ID] = T_area;
        }

        // Populate overlap tables
        atom_i.ov_table.clear();
        atom_i.ov_table_area.clear();
        atom_i.ov_norm_area.clear();

        for (uint32 i = 0; i < atom_i.AREA_BURIED_BY_ATOM_vector.size(); ++i) {
            if (valid_overlaps[i]) {
                atom_i.ov_table.push_back(atom_i.AREA_BURIED_BY_ATOM_vector[i]);
                atom_i.ov_table_area.push_back(atom_i.AREA_BURIED_BY_ATOM_area[i]);
                atom_i.ov_norm_area.push_back(atom_i.AREA_BURIED_BY_ATOM_area[i] / 
                                            atom_i.AREA_BURIED_BY_ATOM_vector[i].size());
            }
        }
    }
}#pragma once
#include <pybind11/pybind11.h>
#include <pybind11/numpy.h>
#include <pybind11/stl.h>
#include "atom_bindings.hpp"
#include "constants.hpp"

namespace py = pybind11;

// ASA component structure to hold all classifications
struct ASAComponents {
    float bb_asa = 0.0f;
    float sc_asa = 0.0f;
    float majorgroove_asa = 0.0f;
    float minorgroove_asa = 0.0f;
    float nogroove_asa = 0.0f;
    float polar_asa = 0.0f;
    float polar_bb_asa = 0.0f;
    float polar_sc_asa = 0.0f;
    float polar_majorgroove_asa = 0.0f;
    float polar_minorgroove_asa = 0.0f;
    float polar_nogroove_asa = 0.0f;
    float hyd_asa = 0.0f;
    float hyd_bb_asa = 0.0f;
    float hyd_sc_asa = 0.0f;
    float hyd_majorgroove_asa = 0.0f;
    float hyd_minorgroove_asa = 0.0f;
    float hyd_nogroove_asa = 0.0f;
    float lig_asa = 0.0f;
    float lig_polar_asa = 0.0f;
    float lig_hyd_asa = 0.0f;
};

// Other utility functions
template<typename T>
inline py::array_t<T> to_numpy(const std::vector<T>& vec) {
    return py::array_t<T>(vec.size(), vec.data());
}

template<typename T>
inline std::vector<T> from_numpy(const py::array_t<T>& arr) {
    py::buffer_info buf = arr.request();
    T* ptr = static_cast<T*>(buf.ptr);
    return std::vector<T>(ptr, ptr + buf.size);
}

// Classification helper function
ASAComponents classify_atom_asa(const atom_struct& atom, float base_asa);

// Main analysis functions
py::dict create_analysis_results(const std::vector<atom_struct>& atoms, bool include_matrix);
py::dict generate_inter_bsa_matrices(std::vector<atom_struct>& atoms);
py::dict generate_intra_bsa_matrices(std::vector<atom_struct>& atoms);
void calculate_contact_areas_from_overlaps(std::vector<atom_struct>& pdb);